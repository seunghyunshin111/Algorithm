# -*- coding: utf-8 -*-
"""2일차_과제_[제어문]_웹툰데이터관리하기

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-NwG2LdBCW5YQaqdwKSRQ8RCcX_yw4lu
"""

import requests
from bs4 import BeautifulSoup

url = 'https://comic.naver.com/webtoon/weekdayList.nhn?week=mon'

resp = requests.get(url)

soup = BeautifulSoup(resp.content, 'lxml')
title_tag = soup.select('ul.img_list li dl dt a')
author_tag = soup.select('ul.img_list li dl dd a')
rating_tag = soup.select('ul.img_list li dl dd strong')

len(rating_tag)

title_tag

data_list = []
for title, author, rating in zip(title_tag, author_tag, rating_tag):
  data = {
      'title' : title.text,
      'author' : author.text,
      'rating' : rating.text,
  }
  data_list.append(data)

data_list

"""과제1. author가 전체보기로 되어있는 데이터는 webtoon_list에서 모두 삭제해주세요.

과제2. rating이 9.9 이상인 웹툰의 제목 따로 recommended 변수에 담아주세요.

과제3(추가과제). rating이 제일 높은 데이터 3개만 top_recommended에 담아주세요.
"""

# 과제1. author가 전체보기로 되어있는 데이터는 webtoon_list에서 모두 삭제해주세요.

All = [item for item in data_list if item['author'] != '전체보기']
All

# 과제2. rating이 9.9 이상인 웹툰의 제목 따로 recommended 변수에 담아주세요.

# recommended = [item['title'] for item in data_list if item['rating'] >= '9.9']
# recommended

recommended = [item['title'] for item in data_list if float(item['rating']) >= 9.9]
recommended

# 과제3(추가과제). rating이 제일 높은 데이터 3개만 top_recommended에 담아주세요.

top_trecommended = [item for item in data_list if float(item['rating']) >= 9.98]
top_trecommended

# 시도했으나 안 된 코드

# top_trecommended = [item for item in data_list if [float(item['rating'])].head(3)]
# top_trecommended

# top_trecommended = [item for item in data_list if float(item['rating']) == (float(item['rating'])).head(3)]
# top_trecommended